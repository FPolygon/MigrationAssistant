name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore MigrationAssistant.sln

    - name: Build
      run: dotnet build MigrationAssistant.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests
      timeout-minutes: 10
      run: |
        dotnet test MigrationAssistant.sln `
          --configuration ${{ matrix.configuration }} `
          --no-build `
          --verbosity normal `
          --logger "trx;LogFileName=test-results-${{ matrix.configuration }}.trx" `
          --logger "console;verbosity=detailed" `
          --collect:"XPlat Code Coverage" `
          --results-directory ./TestResults `
          --filter "Category!=Integration&Category!=RequiresNamedPipes" `
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      shell: powershell

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}
        path: TestResults/**/*.trx

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: matrix.configuration == 'Release'
      with:
        name: coverage-report
        path: TestResults/**/coverage.opencover.xml

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: always()
      with:
        files: |
          TestResults/**/*.trx
        check_name: Test Results (${{ matrix.configuration }})
        comment_mode: off

    - name: Generate coverage report
      if: matrix.configuration == 'Release'
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator `
          -reports:TestResults/**/coverage.opencover.xml `
          -targetdir:CoverageReport `
          -reporttypes:Html;Badges;TextSummary
        Get-Content CoverageReport/Summary.txt
      shell: powershell

    - name: Upload coverage to Codecov
      if: matrix.configuration == 'Release'
      uses: codecov/codecov-action@v3
      with:
        files: ./TestResults/**/coverage.opencover.xml
        flags: unittests
        name: codecov-${{ runner.os }}
        fail_ci_if_error: false

    - name: Check minimum coverage
      if: matrix.configuration == 'Release'
      run: |
        $coverage = (Select-String -Path "CoverageReport/Summary.txt" -Pattern "Line coverage: (\d+\.?\d*)%" | ForEach-Object { $_.Matches[0].Groups[1].Value })
        $coverageValue = [double]$coverage
        Write-Host "Current coverage: $coverageValue%"
        if ($coverageValue -lt 70) {
          Write-Error "Coverage $coverageValue% is below the minimum threshold of 70%"
          exit 1
        }
      shell: powershell

  code-quality:
    name: Code Quality Checks
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: .NET Format check
      run: |
        dotnet format MigrationAssistant.sln --verify-no-changes --verbosity diagnostic
      shell: powershell

    - name: Run .NET analyzers
      run: |
        dotnet build MigrationAssistant.sln /p:RunAnalyzersDuringBuild=true /p:TreatWarningsAsErrors=true
      shell: powershell

  security-scan:
    name: Security Scanning
    runs-on: windows-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build solution
      run: |
        dotnet build MigrationAssistant.sln
      shell: powershell

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  validate-powershell:
    name: Validate PowerShell Scripts
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run PSScriptAnalyzer
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
        $scripts = Get-ChildItem -Path . -Include *.ps1 -Recurse
        $results = @()
        foreach ($script in $scripts) {
          Write-Host "Analyzing $($script.FullName)"
          $results += Invoke-ScriptAnalyzer -Path $script.FullName -Settings PSGallery -Severity Error,Warning
        }
        if ($results.Count -gt 0) {
          $results | Format-Table -AutoSize
          Write-Error "PSScriptAnalyzer found $($results.Count) issues"
          exit 1
        }
      shell: powershell

  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    needs: build-and-test
    continue-on-error: true  # Allow this job to fail without failing the workflow
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore MigrationAssistant.sln

    - name: Build
      run: dotnet build MigrationAssistant.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Run integration tests
      timeout-minutes: 5
      run: |
        Write-Host "Running integration tests (allowed to fail in CI environment)"
        dotnet test MigrationAssistant.sln `
          --configuration ${{ matrix.configuration }} `
          --no-build `
          --verbosity normal `
          --logger "trx;LogFileName=integration-test-results-${{ matrix.configuration }}.trx" `
          --logger "console;verbosity=detailed" `
          --results-directory ./IntegrationTestResults `
          --filter "Category=Integration|Category=RequiresNamedPipes" `
          --blame-hang-timeout 60s `
          --blame-hang-dump-type none
      shell: powershell
      continue-on-error: true

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-${{ matrix.configuration }}
        path: IntegrationTestResults/**/*.trx

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan, validate-powershell]
    steps:
    - name: All checks completed successfully
      run: echo "All CI checks have passed successfully!"